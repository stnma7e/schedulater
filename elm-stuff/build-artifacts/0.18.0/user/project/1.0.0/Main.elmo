var _user$project$Main$makeSched = F2(
	function (model, comboIndex) {
		var convertComboToClassList = F2(
			function (courseIndex, classIndex) {
				var maybeCourse = (_elm_lang$core$Native_Utils.cmp(classIndex, 0) > 0) ? A2(_elm_lang$core$Array$get, courseIndex, model.courses.courses) : _elm_lang$core$Maybe$Nothing;
				var courseName = function () {
					var _p0 = maybeCourse;
					if (_p0.ctor === 'Just') {
						return _p0._0.title;
					} else {
						return '';
					}
				}();
				var maybeClass = A2(
					_elm_lang$core$Maybe$andThen,
					_elm_lang$core$Array$get(0),
					A2(
						_elm_lang$core$Maybe$andThen,
						function (course) {
							return A2(_elm_lang$core$Array$get, classIndex - 1, course.classes);
						},
						maybeCourse));
				return A2(
					_elm_lang$core$Maybe$map,
					function (c) {
						return {ctor: '_Tuple2', _0: courseName, _1: c};
					},
					maybeClass);
			});
		var combo = function () {
			var _p1 = A2(_elm_lang$core$Array$get, comboIndex, model.courses.combos);
			if (_p1.ctor === 'Just') {
				return _p1._0;
			} else {
				return _elm_lang$core$Array$empty;
			}
		}();
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Array$toList(
				A2(_elm_lang$core$Array$indexedMap, convertComboToClassList, combo)));
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$sched = _elm_lang$core$Native_Platform.outgoingPort(
	'sched',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return [
					v._0,
					{crn: v._1.crn, cap: v._1.cap, remaining: v._1.remaining, instructor: v._1.instructor, daytimes: v._1.daytimes}
				];
			});
	});
var _user$project$Main$CalendarData = function (a) {
	return {schedIndex: a};
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {courses: a, calendar: b, subjects: c, coursesErr: d};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A4(
		_user$project$Main$Model,
		A3(_user$project$Types$CourseData, 0, _elm_lang$core$Array$empty, _elm_lang$core$Array$empty),
		_user$project$Main$CalendarData(0),
		{ctor: '[]'},
		''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$RenderCurrentSched = {ctor: 'RenderCurrentSched'};
var _user$project$Main$IncrementSched = {ctor: 'IncrementSched'};
var _user$project$Main$NewScheds = function (a) {
	return {ctor: 'NewScheds', _0: a};
};
var _user$project$Main$getScheds = A2(
	_elm_lang$http$Http$send,
	_user$project$Main$NewScheds,
	A3(
		_elm_lang$http$Http$post,
		'/courses',
		A2(_elm_lang$http$Http$stringBody, 'application/json', _user$project$Types$body),
		_user$project$Types$decodeCourseData));
var _user$project$Main$NewSubjects = function (a) {
	return {ctor: 'NewSubjects', _0: a};
};
var _user$project$Main$getSubs = A2(
	_elm_lang$http$Http$send,
	_user$project$Main$NewSubjects,
	A2(
		_elm_lang$http$Http$get,
		'/subjects',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p2 = msg;
			switch (_p2.ctor) {
				case 'GetSubjects':
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$getSubs};
				case 'GetScheds':
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$getScheds};
				case 'NewSubjects':
					if (_p2._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{subjects: _p2._0._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									subjects: {
										ctor: '::',
										_0: _elm_lang$core$Basics$toString(_p2._0._0),
										_1: {ctor: '[]'}
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'NewScheds':
					if (_p2._0.ctor === 'Ok') {
						var _v3 = _user$project$Main$RenderCurrentSched,
							_v4 = _elm_lang$core$Native_Utils.update(
							model,
							{
								courses: _p2._0._0,
								calendar: _user$project$Main$CalendarData(0)
							});
						msg = _v3;
						model = _v4;
						continue update;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									coursesErr: _elm_lang$core$Basics$toString(_p2._0._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'RenderCurrentSched':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Main$sched(
							A2(_user$project$Main$makeSched, model, model.calendar.schedIndex))
					};
				default:
					var _v5 = _user$project$Main$RenderCurrentSched,
						_v6 = _elm_lang$core$Native_Utils.update(
						model,
						{
							calendar: _user$project$Main$CalendarData(model.calendar.schedIndex + 1)
						});
					msg = _v5;
					model = _v6;
					continue update;
			}
		}
	});
var _user$project$Main$GetScheds = {ctor: 'GetScheds'};
var _user$project$Main$GetSubjects = {ctor: 'GetSubjects'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$GetSubjects),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Get Subs'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$GetScheds),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Get Scheds'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$IncrementSched),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Inc Sched'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							A2(
								_elm_lang$core$List$map,
								function (x) {
									return _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(x));
								},
								{
									ctor: '::',
									_0: model.calendar.schedIndex,
									_1: {ctor: '[]'}
								})),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
